import Head from "next/head";
import Feed from "../components/explore/Feed";
import Header from "../components/explore/Header";
import Sidebar from "../components/explore/Sidebar";
import ThemeToggle from "../components/ThemeToggle";
import { useState } from "react";
import { PrismaClient } from "@prisma/client";
import { getSession } from "next-auth/react";

export default function Explore({ resources }) {
  const [articles, setArticles] = useState(false);
  const [courses, setCourses] = useState(false);
  const [hackathons, setHackathons] = useState(false);
  const [devTools, setDevTools] = useState(false);
  const [books, setBooks] = useState(false);
  const [cheatsheets, setCheatsheets] = useState(false);
  const [roadmaps, setRoadmaps] = useState(false);
  const [onlinePlatforms, setOnlinePlatforms] = useState(false);
  const [blogs, setBlogs] = useState(false);
  const [explore, SetExplore] = useState(true);

  const [articleRoute, setArticlesRoute] = useState(false);
  const [coursesRoute, setCoursesRoute] = useState(false);
  const [hackathonsRoute, setHackathonsRoute] = useState(false);
  const [devToolsRoute, setDevToolsRoute] = useState(false);
  const [booksRoute, setBooksRoute] = useState(false);
  const [cheatsheetsRoute, setCheatsheetsRoute] = useState(false);
  const [roadmapsRoute, setRoadmapsRoute] = useState(false);
  const [onlinePlatformsRoute, setOnlinePlatformsRoute] = useState(false);
  const [blogsRoute, setBlogsRoute] = useState(false);
  const [exploreRoute, SetExploreRoute] = useState(true);

  const propsForFeed = {
    articles,
    articleRoute,
    setArticlesRoute,
    coursesRoute,
    setCoursesRoute,
    hackathonsRoute,
    setHackathonsRoute,
    devToolsRoute,
    setDevToolsRoute,
    booksRoute,
    setBooksRoute,
    cheatsheetsRoute,
    setCheatsheetsRoute,
    roadmapsRoute,
    setRoadmapsRoute,
    onlinePlatformsRoute,
    setOnlinePlatformsRoute,
    blogsRoute,
    setBlogsRoute,
    exploreRoute,
    SetExploreRoute,
    setArticles,
    courses,
    setCourses,
    hackathons,
    setHackathons,
    devTools,
    setDevTools,
    books,
    setBooks,
    cheatsheets,
    setCheatsheets,
    roadmaps,
    setRoadmaps,
    onlinePlatforms,
    setOnlinePlatforms,
    blogs,
    setBlogs,
    explore,
    SetExplore,
  };
  return (
    <div>
      <Head>
        <title>Explore | ResourceHub</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Sidebar props={propsForFeed} />

      <main className="w-full h-full bg-white dark:bg-black">
        <Feed resources={resources} props={propsForFeed} />
        <ThemeToggle />
      </main>
    </div>
  );
}

export async function getServerSideProps(context) {
  const prisma = new PrismaClient();
  if (!context.query.category) {
    const response = await prisma.resource.findMany({
      include: {
        uploader: true,
      },
    });

    // Pass the data to the Home page
    return {
      props: {
        resources: JSON.parse(JSON.stringify(response)),
      },
    };
  } else {
    const category = context.query.category;
    if (category == "articles") {
      const response = await prisma.resource.findMany({
        include: {
          uploader: true,
        },
        where: {
          resourceCategory: {
            equals: "Article",
          },
        },
      });

      // Pass the data to the Home page
      return {
        props: {
          resources: JSON.parse(JSON.stringify(response)),
        },
      };
    }
    if (category == "courses") {
      const response = await prisma.resource.findMany({
        include: {
          uploader: true,
        },
        where: {
          resourceCategory: {
            equals: "Course",
          },
        },
      });

      // Pass the data to the Home page
      return {
        props: {
          resources: JSON.parse(JSON.stringify(response)),
        },
      };
    }
    if (category == "hackathons") {
      const response = await prisma.resource.findMany({
        include: {
          uploader: true,
        },
        where: {
          resourceCategory: {
            equals: "Hackathon",
          },
        },
      });

      // Pass the data to the Home page
      return {
        props: {
          resources: JSON.parse(JSON.stringify(response)),
        },
      };
    }
    if (category == "developer_tools") {
      const response = await prisma.resource.findMany({
        include: {
          uploader: true,
        },
        where: {
          resourceCategory: {
            equals: "Developer Tool",
          },
        },
      });

      // Pass the data to the Home page
      return {
        props: {
          resources: JSON.parse(JSON.stringify(response)),
        },
      };
    }
    if (category == "books") {
      const response = await prisma.resource.findMany({
        include: {
          uploader: true,
        },
        where: {
          resourceCategory: {
            equals: "Book",
          },
        },
      });

      // Pass the data to the Home page
      return {
        props: {
          resources: JSON.parse(JSON.stringify(response)),
        },
      };
    }
    if (category == "cheatsheets") {
      const response = await prisma.resource.findMany({
        include: {
          uploader: true,
        },
        where: {
          resourceCategory: {
            equals: "CheatSheet",
          },
        },
      });

      // Pass the data to the Home page
      return {
        props: {
          resources: JSON.parse(JSON.stringify(response)),
        },
      };
    }
    if (category == "roadmaps") {
      const response = await prisma.resource.findMany({
        include: {
          uploader: true,
        },
        where: {
          resourceCategory: {
            equals: "Roadmap",
          },
        },
      });

      // Pass the data to the Home page
      return {
        props: {
          resources: JSON.parse(JSON.stringify(response)),
        },
      };
    }
    if (category == "online_platforms") {
      const response = await prisma.resource.findMany({
        include: {
          uploader: true,
        },
        where: {
          resourceCategory: {
            equals: "Online Platform",
          },
        },
      });

      // Pass the data to the Home page
      return {
        props: {
          resources: JSON.parse(JSON.stringify(response)),
        },
      };
    }
    if (category == "blogs") {
      const response = await prisma.resource.findMany({
        include: {
          uploader: true,
        },
        where: {
          resourceCategory: {
            equals: "Blog",
          },
        },
      });

      // Pass the data to the Home page
      return {
        props: {
          resources: JSON.parse(JSON.stringify(response)),
        },
      };
    }
  }
}
